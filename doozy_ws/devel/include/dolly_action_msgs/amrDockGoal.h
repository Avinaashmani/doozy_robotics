// Generated by gencpp from file dolly_action_msgs/amrDockGoal.msg
// DO NOT EDIT!


#ifndef DOLLY_ACTION_MSGS_MESSAGE_AMRDOCKGOAL_H
#define DOLLY_ACTION_MSGS_MESSAGE_AMRDOCKGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dolly_action_msgs
{
template <class ContainerAllocator>
struct amrDockGoal_
{
  typedef amrDockGoal_<ContainerAllocator> Type;

  amrDockGoal_()
    : reached_point(false)
    , pallet_idx(0)  {
    }
  amrDockGoal_(const ContainerAllocator& _alloc)
    : reached_point(false)
    , pallet_idx(0)  {
  (void)_alloc;
    }



   typedef uint8_t _reached_point_type;
  _reached_point_type reached_point;

   typedef int32_t _pallet_idx_type;
  _pallet_idx_type pallet_idx;





  typedef boost::shared_ptr< ::dolly_action_msgs::amrDockGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dolly_action_msgs::amrDockGoal_<ContainerAllocator> const> ConstPtr;

}; // struct amrDockGoal_

typedef ::dolly_action_msgs::amrDockGoal_<std::allocator<void> > amrDockGoal;

typedef boost::shared_ptr< ::dolly_action_msgs::amrDockGoal > amrDockGoalPtr;
typedef boost::shared_ptr< ::dolly_action_msgs::amrDockGoal const> amrDockGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dolly_action_msgs::amrDockGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dolly_action_msgs::amrDockGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dolly_action_msgs::amrDockGoal_<ContainerAllocator1> & lhs, const ::dolly_action_msgs::amrDockGoal_<ContainerAllocator2> & rhs)
{
  return lhs.reached_point == rhs.reached_point &&
    lhs.pallet_idx == rhs.pallet_idx;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dolly_action_msgs::amrDockGoal_<ContainerAllocator1> & lhs, const ::dolly_action_msgs::amrDockGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dolly_action_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dolly_action_msgs::amrDockGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dolly_action_msgs::amrDockGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dolly_action_msgs::amrDockGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dolly_action_msgs::amrDockGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dolly_action_msgs::amrDockGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dolly_action_msgs::amrDockGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dolly_action_msgs::amrDockGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "43f04e9c3ca80aa3d24bcb32ea9ec9f1";
  }

  static const char* value(const ::dolly_action_msgs::amrDockGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x43f04e9c3ca80aa3ULL;
  static const uint64_t static_value2 = 0xd24bcb32ea9ec9f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::dolly_action_msgs::amrDockGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dolly_action_msgs/amrDockGoal";
  }

  static const char* value(const ::dolly_action_msgs::amrDockGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dolly_action_msgs::amrDockGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"## Reached Coordinates ##\n"
"\n"
"bool reached_point\n"
"int32 pallet_idx\n"
;
  }

  static const char* value(const ::dolly_action_msgs::amrDockGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dolly_action_msgs::amrDockGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reached_point);
      stream.next(m.pallet_idx);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct amrDockGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dolly_action_msgs::amrDockGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dolly_action_msgs::amrDockGoal_<ContainerAllocator>& v)
  {
    s << indent << "reached_point: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reached_point);
    s << indent << "pallet_idx: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pallet_idx);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DOLLY_ACTION_MSGS_MESSAGE_AMRDOCKGOAL_H
